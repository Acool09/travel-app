const mongoose = require("mongoose");

const listingSchema = new mongoose.Schema({
  title: String,
  description: String,
  price: Number,
  location: String,
  image: String,

  host: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },

  likes: {
    type: [String], // –º–∞—Å—Å–∏–≤ userId, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –∂–∏–ª—å—ë
    default: [],
  },

  // üßç‚Äç‚ôÇÔ∏è –ú–∞–∫—Å–∏–º—É–º –≥–æ—Å—Ç–µ–π
  maxGuests: {
    type: Number,
    required: true,
    default: 2,
  },

  // üè† –¢–∏–ø –∂–∏–ª—å—è (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
  type: {
    type: String,
    enum: ["apartment", "house", "tent", "villa", "cabin"],
    default: "apartment",
  },

  // ‚úÖ –£–¥–æ–±—Å—Ç–≤–∞ (Wi-Fi, –∫—É—Ö–Ω—è, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –∏ —Ç.–¥.)
  amenities: {
    type: [String],
    default: [],
  },

  // ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–∑—ã–≤–æ–≤)
  averageRating: {
    type: Number,
    default: 0,
  },

}, { timestamps: true });

// ‚úÖ –ù–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
const Listing = mongoose.models.Listing || mongoose.model("Listing", listingSchema);

module.exports = Listing;
