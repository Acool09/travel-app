const express = require("express");
const router = express.Router();
const Review = require("../models/Review");
const Listing = require("../models/listing");
const verifyToken = require("../middleware/verifyToken");

// ‚úÖ POST /reviews ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
router.post("/", verifyToken, async (req, res) => {
  const { listing, rating, comment } = req.body || {};

  if (!listing || rating == null || !comment) {
    return res
      .status(400)
      .json({ error: "–í—Å–µ –ø–æ–ª—è (listing, rating, comment) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ rating –∏ –¥–ª–∏–Ω—ã comment
  if (typeof rating !== "number" || rating < 1 || rating > 5) {
    return res.status(400).json({ error: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5" });
  }

  if (typeof comment !== "string" || comment.trim().length < 3) {
    return res.status(400).json({ error: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞" });
  }

  try {
    const existing = await Review.findOne({ listing, user: req.user.userId });

    if (existing) {
      return res
        .status(400)
        .json({ error: "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∂–∏–ª—å—è" });
    }

    const newReview = new Review({
      listing,
      user: req.user.userId,
      rating,
      comment,
    });

    const saved = await newReview.save();

    const allReviews = await Review.find({ listing });
    const average =
      allReviews.reduce((sum, r) => sum + r.rating, 0) / allReviews.length;

    await Listing.findByIdAndUpdate(listing, {
      averageRating: average.toFixed(1),
    });

    res.status(201).json(saved);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ GET /reviews/:listingId ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ –∂–∏–ª—å—é
router.get("/:listingId", async (req, res) => {
  try {
    const reviews = await Review.find({ listing: req.params.listingId })
      .populate("user", "name")
      .sort({ createdAt: -1 });

    res.json(reviews);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ PUT /reviews/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤
router.put("/:id", verifyToken, async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);
    if (!review) {
      return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (review.user.toString() !== req.user.userId) {
      return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" });
    }

    const { rating, comment } = req.body;
    if (!rating && !comment) {
      return res
        .status(400)
        .json({ error: "–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ: rating –∏–ª–∏ comment" });
    }

    if (rating) {
      if (typeof rating !== "number" || rating < 1 || rating > 5) {
        return res.status(400).json({ error: "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5" });
      }
      review.rating = rating;
    }

    if (comment) {
      if (typeof comment !== "string" || comment.trim().length < 3) {
        return res.status(400).json({ error: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞" });
      }
      review.comment = comment;
    }

    const updated = await review.save();

    const allReviews = await Review.find({ listing: review.listing });
    const average =
      allReviews.reduce((sum, r) => sum + r.rating, 0) / allReviews.length;

    await Listing.findByIdAndUpdate(review.listing, {
      averageRating: average.toFixed(1),
    });

    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ DELETE /reviews/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤
router.delete("/:id", verifyToken, async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);
    if (!review) {
      return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (review.user.toString() !== req.user.userId) {
      return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ" });
    }

    const listingId = review.listing;
    await review.deleteOne();

    const remaining = await Review.find({ listing: listingId });

    let average = 0;
    if (remaining.length > 0) {
      average =
        remaining.reduce((sum, r) => sum + r.rating, 0) / remaining.length;
    }

    await Listing.findByIdAndUpdate(listingId, {
      averageRating: average.toFixed(1),
    });

    res.json({ message: "–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;